name: CD - Deploy to OKE (via Bastion)

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (dev or uat)"
        required: true
        type: string
    secrets:
      OCIR_HOST:
        required: true
      OCIR_REPO:
        required: true
      BASTION_HOST:
        required: true
      BASTION_OCID:
        required: true
      OKE_CLUSTER_OCID:
        required: true
      OCI_CLI_REGION:
        required: true
      OCI_CLI_KEY_CONTENT:
        required: true
      OCI_CLI_USER:
        required: true
      OCI_CLI_TENANCY:
        required: true
      OCI_CLI_FINGERPRINT:
        required: true
jobs:
  deploy:
    runs-on: ubuntu-22.04
    env:
      OCI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCIR_HOST: ${{ secrets.OCIR_HOST }}
      OCIR_REPO: ${{ secrets.OCIR_REPO }}

    steps:
      # üßæ Checkout code
      - uses: actions/checkout@v4

      # üì¶ Download image-tag artifact
      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag

      # üß† Read image tag
      - name: Read image tag
        run: |
          IMAGE_TAG=$(cat image-tag.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "üì¶ Using image: ${OCIR_REPO}:${IMAGE_TAG}"

      # üß≠ Determine namespace
      - name: Set target namespace
        run: |
          if [[ "${{ inputs.environment }}" == "dev" ]]; then
            echo "NAMESPACE=bsfc-dev" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "uat" ]]; then
            echo "NAMESPACE=bsfc-uat" >> $GITHUB_ENV
          else
            echo "‚ùå Invalid environment input"; exit 1
          fi
          echo "üß≠ Deploying to namespace: $NAMESPACE"

      # ‚òÅÔ∏è Install OCI CLI & kubectl
      - name: Install OCI CLI & kubectl
        run: |
          set -euxo pipefail
          curl -fsSL -o install.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          sudo ./install.sh --accept-all-defaults \
            --install-dir /usr/local/lib/oracle-cli \
            --exec-dir /usr/local/bin
          curl -fsSLo kubectl "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -m 0755 kubectl /usr/local/bin/kubectl

      # üîê Configure OCI CLI
      - name: Configure OCI CLI
        run: |
          set -euxo pipefail
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          key_file=$HOME/.oci/oci_api_key.pem
          region=${{ env.OCI_REGION }}
          EOF
          chmod 600 ~/.oci/config

      # üõ°Ô∏è Create Bastion Port-Forwarding Session
      - name: Create Bastion Port-Forwarding Session
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keygen -t rsa -b 4096 -m PEM -f ~/.ssh/id_rsa -N ""
          chmod 600 ~/.ssh/id_rsa
          OKE_PRIVATE_IP=$(oci ce cluster get \
            --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
            --query 'data.endpoints."private-endpoint"' \
            --raw-output | cut -d: -f1)
          echo "OKE_PRIVATE_IP=$OKE_PRIVATE_IP" >> $GITHUB_ENV
          SESSION_ID=$(oci bastion session create-port-forwarding \
            --bastion-id "${{ secrets.BASTION_OCID }}" \
            --display-name "gh-oke-${{ inputs.environment }}-$(date +%s)" \
            --ssh-public-key-file ~/.ssh/id_rsa.pub \
            --target-private-ip "$OKE_PRIVATE_IP" \
            --target-port 6443 \
            --wait-for-state SUCCEEDED \
            --query 'data.resources[0].identifier' \
            --raw-output)
          echo "SESSION_ID=$SESSION_ID" >> $GITHUB_ENV
          echo "‚úÖ Bastion session created: $SESSION_ID"
          sleep 10

      # üö™ Start SSH Tunnel
      - name: Start SSH Tunnel
        run: |
          set -euxo pipefail
          echo "üîê Using Bastion Host: ${{ secrets.BASTION_HOST }}"
          ssh -vvv -i "$HOME/.ssh/id_rsa" \
            -o StrictHostKeyChecking=accept-new \
            -fN -L 6443:${{ env.OKE_PRIVATE_IP }}:6443 \
            "${{ env.SESSION_ID }}@${{ secrets.BASTION_HOST }}" || {
              echo "‚ùå SSH tunnel failed. Checking Bastion session info..."
              oci bastion session get --session-id "${{ env.SESSION_ID }}" || true
              exit 1
            }
          for i in {1..10}; do
            nc -z 127.0.0.1 6443 && echo "‚úÖ Tunnel active" && break || sleep 2
          done

      # ‚öôÔ∏è Configure kubeconfig
      - name: Configure OKE kubeconfig
        run: |
          set -euxo pipefail
          mkdir -p ~/.kube
          oci ce cluster create-kubeconfig \
            --config-file ~/.oci/config \
            --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
            --file ~/.kube/config \
            --region "${{ secrets.OCI_CLI_REGION }}" \
            --token-version 2.0.0 \
            --kube-endpoint PRIVATE_ENDPOINT
          sed -i "s|${{ env.OKE_PRIVATE_IP }}|127.0.0.1|g" ~/.kube/config

      # üß™ Test connectivity
      - name: Test cluster connectivity
        run: |
          kubectl get nodes

      # üß© Replace image placeholder
      - name: Replace image placeholder
        run: |
          set -euxo pipefail
          echo "DEBUG: OCIR_REPO=${OCIR_REPO}"
          echo "DEBUG: IMAGE_TAG=${IMAGE_TAG}"
          sed -i "s|IMAGE_PLACEHOLDER|${OCIR_REPO}:${IMAGE_TAG}|g" k8s/deployment.yaml
          echo "=== Final deployment.yaml ==="
          cat k8s/deployment.yaml

      # üöÄ Deploy workload
      - name: Deploy workload
        run: |
          set -euxo pipefail
          kubectl apply -n $NAMESPACE -f k8s/deployment.yaml
          kubectl rollout status -n $NAMESPACE deploy/bsfc --timeout=180s
          echo "‚úÖ Deployment successful to $NAMESPACE using ${OCIR_REPO}:${IMAGE_TAG}"

      # üßπ Cleanup Bastion Session
      - name: Cleanup Bastion Session
        if: always()
        run: |
          set -euxo pipefail
          oci bastion session delete --session-id "${{ env.SESSION_ID }}" --force || true
