name: CD - Deploy to OKE (via Bastion)

# on:
#  push:
#    branches: [ master ]
#    paths:
#      - 'Dockerfile'
#      - 'k8s/**'
#      - '.github/workflows/**'
on:
  workflow_run:
    workflows: ["CI - Build & Push Image"]   # üëà must match name in ci-build.yml
    types:
      - completed
      
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (dev or uat)"
        required: true
        default: "dev"


jobs:
  deploy:
    runs-on: ubuntu-22.04
 
    env:
      OCI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCIR_HOST: ${{ secrets.OCIR_HOST }}
      OCIR_REPO: ${{ secrets.OCIR_REPO }}

    steps:
      - uses: actions/checkout@v4

      # üîê Mask all secrets in logs
      - name: Mask sensitive data
        run: |
          echo "::add-mask::${{ secrets.OCI_AUTH_TOKEN }}"
          echo "::add-mask::${{ secrets.OCI_CLI_KEY_CONTENT }}"
          echo "::add-mask::${{ secrets.OCI_USERNAME }}"

# Build & tag (auto-versioned)
      - name: Build Docker Image
        run: |
          set -euxo pipefail
          IMAGE_TAG="build-${GITHUB_RUN_NUMBER}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t "$OCIR_REPO:$IMAGE_TAG" .
          docker tag "$OCIR_REPO:$IMAGE_TAG" "$OCIR_REPO:latest"

      # ‚òÅÔ∏è Install OCI CLI & kubectl
      - name: Install OCI CLI & kubectl
        run: |
          set -euxo pipefail
          curl -fsSL -o install.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          sudo ./install.sh --accept-all-defaults \
            --install-dir /usr/local/lib/oracle-cli \
            --exec-dir /usr/local/bin
          curl -fsSLo kubectl "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -m 0755 kubectl /usr/local/bin/kubectl

      # ‚öôÔ∏è Configure OCI CLI
      - name: Configure OCI CLI
        run: |
          set -euxo pipefail
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          key_file=$HOME/.oci/oci_api_key.pem
          region=${{ env.OCI_REGION }}
          EOF
          chmod 600 ~/.oci/config

      # üîê Create Bastion session and SSH tunnel (your working code)
      - name: Create Bastion Port-Forwarding Session
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          chmod 600 ~/.ssh/id_rsa
          OKE_PRIVATE_IP=$(oci ce cluster get \
            --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
            --query 'data.endpoints."private-endpoint"' \
            --raw-output | cut -d: -f1)
          echo "oke_private_ip=$OKE_PRIVATE_IP" >> $GITHUB_ENV
          TS=$(date +%s)
          SESSION_ID=$(oci bastion session create-port-forwarding \
            --bastion-id "${{ secrets.BASTION_OCID }}" \
            --display-name "gh-oke-prod-$TS" \
            --ssh-public-key-file ~/.ssh/id_rsa.pub \
            --target-private-ip "$OKE_PRIVATE_IP" \
            --target-port 6443 \
            --wait-for-state SUCCEEDED \
            --query 'data.resources[0].identifier' --raw-output)
          echo "bastion_session_ocid=$SESSION_ID" >> $GITHUB_ENV
          sleep 5

      - name: Start SSH Tunnel
        run: |
          set -euxo pipefail
          ssh -i "$HOME/.ssh/id_rsa" \
              -o StrictHostKeyChecking=accept-new \
              -fN -L 6443:${{ env.oke_private_ip }}:6443 \
              "${{ env.bastion_session_ocid }}@${{ secrets.BASTION_HOST }}"
          for i in {1..10}; do
            nc -z 127.0.0.1 6443 && echo "‚úÖ Tunnel active" && break || sleep 2
          done

      # ‚öôÔ∏è Configure kubeconfig & deploy
      - name: Configure OKE kubeconfig
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/.kube"
          oci ce cluster create-kubeconfig \
            --config-file "$HOME/.oci/config" \
            --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
            --file "$HOME/.kube/config" \
            --region "${{ secrets.OCI_CLI_REGION }}" \
            --token-version 2.0.0 \
            --kube-endpoint PRIVATE_ENDPOINT
          sed -i "s|${{ env.oke_private_ip }}|127.0.0.1|g" "$HOME/.kube/config"
          
      - name: Set environment namespace
        run: |
          # üîπ If triggered manually (workflow_dispatch)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
              echo "NAMESPACE=bsfc-dev" >> $GITHUB_ENV
            elif [[ "${{ github.event.inputs.environment }}" == "uat" ]]; then
              echo "NAMESPACE=bsfc-uat" >> $GITHUB_ENV
            else
              echo "‚ùå Invalid environment selected!"
              exit 1
            fi
            echo "üß≠ Manual trigger: selected ${{ github.event.inputs.environment }} ‚Üí $NAMESPACE"
          
          # üîπ If triggered automatically (workflow_run)
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
              echo "NAMESPACE=bsfc-dev" >> $GITHUB_ENV
            elif [[ "${GITHUB_REF_NAME}" == "uat" ]]; then
              echo "NAMESPACE=bsfc-uat" >> $GITHUB_ENV
            else
              echo "‚ùå Unsupported branch ${GITHUB_REF_NAME}. Exiting."
              exit 1
            fi
            echo "üß≠ Auto trigger: branch ${GITHUB_REF_NAME} ‚Üí $NAMESPACE"
          
          else
            echo "‚ùå Unknown trigger type: ${{ github.event_name }}"
            exit 1
          fi

      - name: Deploy to OKE
        run: |
          set -euxo pipefail
          sed -i "s|IMAGE_PLACEHOLDER|${OCIR_REPO}:${IMAGE_TAG}|g" k8s/deployment.yaml
          kubectl apply -n $NAMESPACE -f k8s/deployment.yaml
          kubectl rollout status -n $NAMESPACE deploy/bsfc --timeout=180s
          echo "‚úÖ Deployment successful to $NAMESPACE"

    #  - name: Deploy to OKE
    #   run: |
    #    set -euxo pipefail
    #      sed -i "s|IMAGE_PLACEHOLDER|${OCIR_REPO}:${IMAGE_TAG}|g" k8s/deployment.yaml
    #     kubectl apply -f k8s/deployment.yaml
    #      kubectl rollout status -n bsfc deploy/bsfc --timeout=180s
    #      echo "‚úÖ Deployment successful"

      - name: Cleanup Bastion Session
        if: always()
        run: |
          set -euxo pipefail
          oci bastion session delete --session-id "${{ env.bastion_session_ocid }}" --force || true

