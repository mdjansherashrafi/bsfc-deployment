name: CI - Build & Push Image

on:
  push:
    branches: [ master, staging ]
    paths:
      - 'Dockerfile'
      - 'web/**'
      - 'k8s/**'
  pull_request:
    branches: [ master, staging ]

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      OCI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCIR_HOST: ${{ secrets.OCIR_HOST }}
      OCIR_REPO: ${{ secrets.OCIR_REPO }}

    steps:
      # üßæ Checkout full repo (to fetch tags)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to access all git tags

      # üß™ Lint YAML & Dockerfile
      - name: Lint YAML & Dockerfile
        run: |
          set -euxo pipefail
          pip install --user yamllint
          wget -qO /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint
          yamllint k8s/
          hadolint Dockerfile

      # üß± Build & Tag Docker Image (Auto-Version)
      - name: Build & Tag Docker Image
        run: |
          set -euxo pipefail

          # Set timezone to KSA (UTC+3)
          sudo timedatectl set-timezone Asia/Riyadh
          
          # Generate timestamp (KSA time)
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')

          # Determine current branch
          BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')

          # Fetch latest tag (e.g., v1.0.9)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")

          # Extract version components
          VERSION_BASE=$(echo "$LATEST_TAG" | sed 's/^v//')
          MAJOR=$(echo "$VERSION_BASE" | cut -d. -f1)
          MINOR=$(echo "$VERSION_BASE" | cut -d. -f2)
          PATCH=$(echo "$VERSION_BASE" | cut -d. -f3)

          # Auto-increment PATCH
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"

          # Final image tag: v1.0.10-master-20251015174522
          IMAGE_TAG="${NEW_VERSION}-${BRANCH}-${TIMESTAMP}"

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "üß© Building image: $OCIR_REPO:$IMAGE_TAG"

          docker build -t "$OCIR_REPO:$IMAGE_TAG" .
          docker tag "$OCIR_REPO:$IMAGE_TAG" "$OCIR_REPO:latest"

          # Optionally push new tag to GitHub
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "$NEW_VERSION" -m "Automated build version $NEW_VERSION"
          git push origin "$NEW_VERSION" || true

      # üîê Login & Push to OCIR
      - name: Login & Push to OCIR
        run: |
          set -euxo pipefail
          echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login "$OCIR_HOST" \
            -u "${{ secrets.OCI_USERNAME }}" --password-stdin
          docker push "$OCIR_REPO:$IMAGE_TAG"
          docker push "$OCIR_REPO:latest"

      # üßæ Save image tag
      - name: Save image tag to file
        run: echo "$IMAGE_TAG" > image-tag.txt

      # üì§ Upload image tag artifact
      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image-tag.txt

      # üß∞ Install GitHub CLI (needed for repo variable)
      - name: Install GitHub CLI
        run: sudo apt-get update -y && sudo apt-get install -y gh

      - name: Persist image tag for later workflows
        run: |
         echo "üîê Storing LAST_IMAGE_TAG for security scan..."
         gh variable set LAST_IMAGE_TAG --body "$IMAGE_TAG" --repo ${{ github.repository }}
        env:
         GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}


  # üöÄ Deploy job (reuse CD workflow)
  deploy:
    needs: build
    uses: mdjansherashrafi/bsfc-deployment/.github/workflows/cd-deploy-oke.yml@master
    with:
      environment: uat
    secrets:
      BASTION_HOST: ${{ secrets.BASTION_HOST }}
      BASTION_OCID: ${{ secrets.BASTION_OCID }}
      OKE_CLUSTER_OCID: ${{ secrets.OKE_CLUSTER_OCID }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCIR_HOST: ${{ secrets.OCIR_HOST }}
      OCIR_REPO: ${{ secrets.OCIR_REPO }}
