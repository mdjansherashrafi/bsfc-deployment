name: CD - Deploy to OKE (via Bastion)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select deployment environment"
        required: true
        type: choice
        options:
          - dev
          - uat

jobs:
  deploy:
    runs-on: ubuntu-22.04
    env:
      OCI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCIR_HOST: ${{ secrets.OCIR_HOST }}
      OCIR_REPO: ${{ secrets.OCIR_REPO }}

    steps:
      - uses: actions/checkout@v4

      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag
        continue-on-error: true

      - name: Read image tag (with fallback)
        run: |
          if [ -f image-tag.txt ]; then
            IMAGE_TAG=$(cat image-tag.txt)
          else
            IMAGE_TAG="latest"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ðŸ“¦ Using image tag: $IMAGE_TAG"

      - name: Set target namespace
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
            echo "NAMESPACE=bsfc-dev" >> $GITHUB_ENV
          else
            echo "NAMESPACE=bsfc-uat" >> $GITHUB_ENV
          fi
          echo "ðŸ§­ Deploying to namespace: $NAMESPACE"

      # Install OCI CLI & kubectl
      - name: Install OCI CLI & kubectl
        run: |
          set -euxo pipefail
          curl -fsSL -o install.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          sudo ./install.sh --accept-all-defaults --install-dir /usr/local/lib/oracle-cli --exec-dir /usr/local/bin
          curl -fsSLo kubectl "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -m 0755 kubectl /usr/local/bin/kubectl

      # Configure OCI
      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          key_file=$HOME/.oci/oci_api_key.pem
          region=${{ env.OCI_REGION }}
          EOF

      # Bastion + Deployment logic (your existing working one)
      - name: Create Bastion Port-Forwarding Session
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keygen -t rsa -b 4096 -m PEM -f ~/.ssh/id_rsa -N ""
          chmod 600 ~/.ssh/id_rsa
          OKE_PRIVATE_IP=$(oci ce cluster get \
            --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
            --query 'data.endpoints."private-endpoint"' \
            --raw-output | cut -d: -f1)
          echo "OKE_PRIVATE_IP=$OKE_PRIVATE_IP" >> $GITHUB_ENV
          SESSION_ID=$(oci bastion session create-port-forwarding \
            --bastion-id "${{ secrets.BASTION_OCID }}" \
            --display-name "gh-oke-${{ github.event.inputs.environment }}-$(date +%s)" \
            --ssh-public-key-file ~/.ssh/id_rsa.pub \
            --target-private-ip "$OKE_PRIVATE_IP" \
            --target-port 6443 \
            --wait-for-state SUCCEEDED \
            --query 'data.resources[0].identifier' \
            --raw-output)
          echo "SESSION_ID=$SESSION_ID" >> $GITHUB_ENV
          sleep 10

      - name: Start SSH Tunnel
        run: |
          ssh -i "$HOME/.ssh/id_rsa" \
              -o StrictHostKeyChecking=accept-new \
              -fN -L 6443:${{ env.OKE_PRIVATE_IP }}:6443 \
              "${{ env.SESSION_ID }}@${{ secrets.BASTION_HOST }}"
          for i in {1..10}; do
            nc -z 127.0.0.1 6443 && echo "âœ… Tunnel active" && break || sleep 2
          done

      - name: Configure OKE kubeconfig
        run: |
          mkdir -p ~/.kube
          oci ce cluster create-kubeconfig \
            --config-file ~/.oci/config \
            --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
            --file ~/.kube/config \
            --region "${{ secrets.OCI_CLI_REGION }}" \
            --token-version 2.0.0 \
            --kube-endpoint PRIVATE_ENDPOINT
          sed -i "s|${{ env.OKE_PRIVATE_IP }}|127.0.0.1|g" ~/.kube/config

      - name: Deploy workload
        run: |
          set -euxo pipefail
          sed -i "s|IMAGE_PLACEHOLDER|${OCIR_REPO}:${IMAGE_TAG}|g" k8s/deployment.yaml
          kubectl apply -n $NAMESPACE -f k8s/deployment.yaml
          kubectl rollout status -n $NAMESPACE deploy/bsfc --timeout=180s
          echo "âœ… Deployment successful to $NAMESPACE using ${OCIR_REPO}:${IMAGE_TAG}"

      - name: Cleanup Bastion Session
        if: always()
        run: |
          oci bastion session delete --session-id "${{ env.SESSION_ID }}" --force || true

