name: Security Scan

on:
  workflow_run:
    workflows:
      - "CD - Deploy to OKE (via Bastion)"
      - "CD-01 - Deploy to OKE (via Bastion)"
    types:
      - completed

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Vulnerability & Secret Scan (with Policy Enforcement)
    runs-on: ubuntu-22.04

    steps:
      # 🧾 Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🔢 Read last built image tag from repo variable
      - name: Set Image Reference
        run: |
          if [ -z "${{ vars.LAST_IMAGE_TAG }}" ]; then
            echo "❌ No LAST_IMAGE_TAG found — please ensure CI pipeline sets it using 'gh variable set LAST_IMAGE_TAG'."
            exit 1
          fi

          IMAGE_TAG="${{ vars.LAST_IMAGE_TAG }}"
          IMAGE="${{ secrets.OCIR_REPO }}:${IMAGE_TAG}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "🔗 Scanning image: $IMAGE"

      # 🔐 Login to OCIR
      - name: Login to OCIR
        run: echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login ${{ secrets.OCIR_HOST }} -u "${{ secrets.OCI_USERNAME }}" --password-stdin

      # 🧰 Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy jq

      # 🔍 Run Trivy vulnerability scan
      - name: Run Trivy vulnerability scan
        id: trivy
        run: |
          echo "🔎 Running vulnerability scan on image: $IMAGE"
          trivy image --timeout 15m \
                      --vuln-type os,library \
                      --format json \
                      --ignore-unfixed \
                      --output trivy-report.json \
                      --severity HIGH,CRITICAL \
                      $IMAGE

          # ✅ Optional enforcement for master branch only
          if [[ "${{ github.ref_name }}" != "master" ]]; then
            echo "ℹ️ Skipping vulnerability enforcement for non-master branch: ${{ github.ref_name }}"
            exit 0
          fi

          CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)
          echo "CRITICAL vulnerabilities: $CRITICAL_COUNT"
          echo "HIGH vulnerabilities: $HIGH_COUNT"

          MAX_HIGH=10
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Policy violation: CRITICAL vulnerabilities found!"
            exit 1
          elif [ "$HIGH_COUNT" -gt "$MAX_HIGH" ]; then
            echo "❌ Policy violation: Too many HIGH vulnerabilities ($HIGH_COUNT > $MAX_HIGH)"
            exit 1
          else
            echo "✅ Passed: Vulnerability thresholds within acceptable range."
          fi

          trivy image --timeout 15m \
                      --severity HIGH,CRITICAL \
                      --vuln-type os,library \
                      --ignore-unfixed \
                      --format table \
                      $IMAGE | tee trivy-report.txt

      # 📊 Upload reports
      - name: Upload Trivy Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerability-reports
          path: |
            trivy-report.json
            trivy-report.txt
