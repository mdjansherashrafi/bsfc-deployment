name: Security Scan

on:
  workflow_call:  # 👈 allows reuse from CI/CD workflows
    inputs:
      image_tag:
        description: "Optional image tag (if not using artifact)"
        required: false
        type: string
    secrets:
      OCIR_HOST:
        required: true
      OCIR_REPO:
        required: true
      OCI_USERNAME:
        required: true
      OCI_AUTH_TOKEN:
        required: true

  workflow_dispatch:  # 👈 allows manual trigger from Actions tab
    inputs:
      image_tag:
        description: "Optional image tag to scan"
        required: false
        type: string

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Vulnerability & Secret Scan (with Policy Enforcement)
    runs-on: ubuntu-22.04

    steps:
      # 🧾 Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 📥 Download image tag artifact (if exists)
      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: .
        continue-on-error: true

      # 🧠 Resolve image tag (priority: input > artifact > default)
      - name: Determine Image Tag
        run: |
          if [ -f "image-tag.txt" ]; then
            IMAGE_TAG=$(cat image-tag.txt)
          elif [ -n "${{ inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ inputs.image_tag }}"
          else
            echo "❌ No image tag found — please provide input or upload image-tag artifact."
            exit 1
          fi

          IMAGE="${{ secrets.OCIR_HOST }}/${{ secrets.OCIR_REPO }}:${IMAGE_TAG}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "🔗 Scanning image: $IMAGE"

      # 🔐 Login to OCIR
      - name: Login to OCIR
        run: |
          echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login ${{ secrets.OCIR_HOST }} \
            -u "${{ secrets.OCI_USERNAME }}" --password-stdin

      # 🧰 Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release jq
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy
               
                
      # 🧲 Pull image from OCIR before scanning
      - name: Pull image from OCIR
        run: |
          echo "🔐 Pulling image $IMAGE from OCIR..."
          docker pull $IMAGE


      # 🔍 Run basic Trivy scan (table format)
      - name: Run Trivy table scan
        run: |
          echo "🧭 Quick table scan for visibility"
          trivy image --format table --severity HIGH,CRITICAL $IMAGE

      # 🧪 Run Trivy vulnerability scan with policy enforcement
      - name: Run Trivy vulnerability scan
        id: trivy
        run: |
          echo "🔎 Running vulnerability scan on image: $IMAGE"

          # Generate JSON report
          trivy image --timeout 15m \
                      --vuln-type os,library \
                      --format json \
                      --ignore-unfixed \
                      --output trivy-report.json \
                      --severity HIGH,CRITICAL \
                      $IMAGE

          # Count vulnerabilities
          CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)

          echo "CRITICAL vulnerabilities: $CRITICAL_COUNT"
          echo "HIGH vulnerabilities: $HIGH_COUNT"

          # Policy enforcement
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Policy violation: CRITICAL vulnerabilities found!"
            exit 1
          elif [ "$HIGH_COUNT" -gt 10 ]; then
            echo "❌ Policy violation: Too many HIGH vulnerabilities ($HIGH_COUNT > 10)"
            exit 1
          else
            echo "✅ Passed: Vulnerability thresholds within acceptable range."
          fi

          # Create readable table report
          trivy image --timeout 15m \
                      --severity HIGH,CRITICAL \
                      --vuln-type os,library \
                      --ignore-unfixed \
                      --format table \
                      $IMAGE | tee trivy-report.txt

      # 📊 Upload Trivy Reports
      - name: Upload Trivy Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerability-reports
          path: |
            trivy-report.json
            trivy-report.txt
